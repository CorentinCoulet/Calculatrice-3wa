pipeline {
    agent any
    
    environment {
        // Variables d'environnement
        NODE_ENV = 'test'
        PATH = "${env.PATH};C:\\Program Files\\nodejs"
    }
    
    stages {
        stage('üîç Checkout') {
            steps {
                echo 'R√©cup√©ration du code source...'
                checkout scm
            }
        }
        
        stage('üì¶ Install Dependencies') {
            steps {
                echo 'Installation des d√©pendances Node.js...'
                bat '''
                    echo "Versions install√©es :"
                    node --version
                    npm --version
                    echo.
                    echo "Installation des d√©pendances..."
                    npm ci
                '''
            }
        }
        
        stage('üß™ Run Tests') {
            steps {
                echo 'Ex√©cution des tests unitaires...'
                bat 'npm test'
            }
            post {
                always {
                    // Publier les r√©sultats des tests JUnit
                    publishTestResults testResultsPattern: 'test-results/junit.xml'
                    
                    // Archiver les rapports de tests
                    archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('üìä Test Coverage') {
            steps {
                echo 'G√©n√©ration du rapport de couverture...'
                bat 'npm run test:coverage'
            }
            post {
                always {
                    // Publier le rapport de couverture HTML
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage/lcov-report',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                    
                    // Archiver les rapports de couverture
                    archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('üîç Code Quality') {
            steps {
                echo 'V√©rification de la qualit√© du code...'
                script {
                    // Version simplifi√©e de v√©rification de couverture
                    if (fileExists('coverage/lcov-report/index.html')) {
                        echo "‚úÖ Rapport de couverture g√©n√©r√© avec succ√®s"
                    } else {
                        echo "‚ö†Ô∏è  Pas de rapport de couverture trouv√©"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('üöÄ Build Application') {
            steps {
                echo 'Construction de l\'application...'
                bat '''
                    echo "V√©rification que l'application d√©marre..."
                    start /B npm start
                    timeout /T 5
                    tasklist /FI "IMAGENAME eq node.exe" 2>NUL | find /I "node.exe" >NUL
                    if %ERRORLEVEL% EQU 0 (
                        echo "‚úÖ Application d√©marre correctement"
                        taskkill /F /IM node.exe >NUL 2>&1
                    ) else (
                        echo "‚ùå Erreur au d√©marrage de l'application"
                        exit 1
                    )
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage du workspace...'
            // Nettoyer les node_modules pour √©conomiser l'espace
            bat 'if exist node_modules rmdir /S /Q node_modules'
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Pipeline √©chou√© !'
            // Notification d'√©chec
        }
        unstable {
            echo '‚ö†Ô∏è  Pipeline instable (tests pass√©s mais qualit√© insuffisante)'
        }
    }
}
