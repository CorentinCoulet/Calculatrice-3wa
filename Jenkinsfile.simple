pipeline {
    agent any
    
    environment {
        NODE_ENV = 'test'
    }
    
    stages {
        stage('üîç Checkout') {
            steps {
                echo 'R√©cup√©ration du code source...'
                checkout scm
            }
        }
        
        stage('üì¶ Install Dependencies') {
            steps {
                echo 'Installation des d√©pendances Node.js...'
                sh '''
                    echo "Versions install√©es :"
                    node --version
                    npm --version
                    echo ""
                    echo "Installation des d√©pendances..."
                    npm ci
                '''
            }
        }
        
        stage('üß™ Run Tests') {
            steps {
                echo 'Ex√©cution des tests unitaires...'
                sh 'npm test'
            }
        }
        
        stage('üìä Test Coverage') {
            steps {
                echo 'G√©n√©ration du rapport de couverture...'
                sh 'npm run test:coverage'
            }
            post {
                always {
                    // Archiver les rapports de couverture
                    archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                }
            }
        }
        
        stage('üöÄ Build Application') {
            steps {
                echo 'V√©rification que l\'application d√©marre...'
                sh '''
                    echo "Test de d√©marrage de l'application..."
                    timeout 10s npm start &
                    PID=$!
                    sleep 3
                    if ps -p $PID > /dev/null; then
                        echo "‚úÖ Application d√©marre correctement"
                        kill $PID
                    else
                        echo "‚ùå Erreur au d√©marrage de l'application"
                        exit 1
                    fi
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage du workspace...'
            sh 'rm -rf node_modules || true'
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå Pipeline √©chou√© !'
        }
    }
}
